/* tslint:disable */
/* eslint-disable */
/**
 * Feedreader
 * Feedreader
 *
 * The version of the OpenAPI document: 1.28.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  Config,
  ListPosts200Response,
  Outline,
  Post,
  SingleOutline,
} from "../models";
import {
  ConfigFromJSON,
  ConfigToJSON,
  ListPosts200ResponseFromJSON,
  ListPosts200ResponseToJSON,
  OutlineFromJSON,
  OutlineToJSON,
  PostFromJSON,
  PostToJSON,
  SingleOutlineFromJSON,
  SingleOutlineToJSON,
} from "../models";

export interface ListPostsRequest {
  outlinePk: string;
  limit?: number;
  offset?: number;
}

export interface PartialUpdateConfigRequest {
  config?: Config;
}

export interface PartialUpdatePostRequest {
  postId: string;
  post?: Post;
}

export interface PartialUpdateSingleOutlineRequest {
  id: string;
  singleOutline?: SingleOutline;
}

export interface RetrievePostRequest {
  outlinePk: string;
  postId: string;
}

export interface RetrieveSingleOutlineRequest {
  id: string;
}

export interface UpdatePostRequest {
  postId: string;
  post?: Post;
}

export interface UpdateSingleOutlineRequest {
  id: string;
  singleOutline?: SingleOutline;
}

/**
 * ApiApi - interface
 *
 * @export
 * @interface ApiApiInterface
 */
export interface ApiApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  listOutlinesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Outline>>>;

  /**
   *
   */
  listOutlines(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Outline>>;

  /**
   *
   * @param {string} outlinePk
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  listPostsRaw(
    requestParameters: ListPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListPosts200Response>>;

  /**
   *
   */
  listPosts(
    requestParameters: ListPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListPosts200Response>;

  /**
   *
   * @param {Config} [config]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  partialUpdateConfigRaw(
    requestParameters: PartialUpdateConfigRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Config>>;

  /**
   *
   */
  partialUpdateConfig(
    requestParameters: PartialUpdateConfigRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Config>;

  /**
   *
   * @param {string} postId
   * @param {Post} [post]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  partialUpdatePostRaw(
    requestParameters: PartialUpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Post>>;

  /**
   *
   */
  partialUpdatePost(
    requestParameters: PartialUpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Post>;

  /**
   *
   * @param {string} id
   * @param {SingleOutline} [singleOutline]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  partialUpdateSingleOutlineRaw(
    requestParameters: PartialUpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SingleOutline>>;

  /**
   *
   */
  partialUpdateSingleOutline(
    requestParameters: PartialUpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SingleOutline>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  retrieveConfigRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Config>>;

  /**
   *
   */
  retrieveConfig(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Config>;

  /**
   *
   * @param {string} outlinePk
   * @param {string} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  retrievePostRaw(
    requestParameters: RetrievePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Post>>;

  /**
   *
   */
  retrievePost(
    requestParameters: RetrievePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Post>;

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  retrieveSingleOutlineRaw(
    requestParameters: RetrieveSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SingleOutline>>;

  /**
   *
   */
  retrieveSingleOutline(
    requestParameters: RetrieveSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SingleOutline>;

  /**
   *
   * @param {string} postId
   * @param {Post} [post]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  updatePostRaw(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Post>>;

  /**
   *
   */
  updatePost(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Post>;

  /**
   *
   * @param {string} id
   * @param {SingleOutline} [singleOutline]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiApiInterface
   */
  updateSingleOutlineRaw(
    requestParameters: UpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SingleOutline>>;

  /**
   *
   */
  updateSingleOutline(
    requestParameters: UpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SingleOutline>;
}

/**
 *
 */
export class ApiApi extends runtime.BaseAPI implements ApiApiInterface {
  /**
   *
   */
  async listOutlinesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Outline>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/1/outlines/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OutlineFromJSON)
    );
  }

  /**
   *
   */
  async listOutlines(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Outline>> {
    const response = await this.listOutlinesRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async listPostsRaw(
    requestParameters: ListPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListPosts200Response>> {
    if (
      requestParameters.outlinePk === null ||
      requestParameters.outlinePk === undefined
    ) {
      throw new runtime.RequiredError(
        "outlinePk",
        "Required parameter requestParameters.outlinePk was null or undefined when calling listPosts."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/1/outlines/{outline_pk}/posts/`.replace(
          `{${"outline_pk"}}`,
          encodeURIComponent(String(requestParameters.outlinePk))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListPosts200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async listPosts(
    requestParameters: ListPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListPosts200Response> {
    const response = await this.listPostsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async partialUpdateConfigRaw(
    requestParameters: PartialUpdateConfigRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Config>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/1/config/`,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: ConfigToJSON(requestParameters.config),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConfigFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async partialUpdateConfig(
    requestParameters: PartialUpdateConfigRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Config> {
    const response = await this.partialUpdateConfigRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async partialUpdatePostRaw(
    requestParameters: PartialUpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Post>> {
    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        "postId",
        "Required parameter requestParameters.postId was null or undefined when calling partialUpdatePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/1/posts/{post_id}/`.replace(
          `{${"post_id"}}`,
          encodeURIComponent(String(requestParameters.postId))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PostToJSON(requestParameters.post),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async partialUpdatePost(
    requestParameters: PartialUpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Post> {
    const response = await this.partialUpdatePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async partialUpdateSingleOutlineRaw(
    requestParameters: PartialUpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SingleOutline>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling partialUpdateSingleOutline."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/1/outlines/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: SingleOutlineToJSON(requestParameters.singleOutline),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SingleOutlineFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async partialUpdateSingleOutline(
    requestParameters: PartialUpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SingleOutline> {
    const response = await this.partialUpdateSingleOutlineRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async retrieveConfigRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Config>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/1/config/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConfigFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrieveConfig(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Config> {
    const response = await this.retrieveConfigRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async retrievePostRaw(
    requestParameters: RetrievePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Post>> {
    if (
      requestParameters.outlinePk === null ||
      requestParameters.outlinePk === undefined
    ) {
      throw new runtime.RequiredError(
        "outlinePk",
        "Required parameter requestParameters.outlinePk was null or undefined when calling retrievePost."
      );
    }

    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        "postId",
        "Required parameter requestParameters.postId was null or undefined when calling retrievePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/1/outlines/{outline_pk}/posts/{post_id}/`
          .replace(
            `{${"outline_pk"}}`,
            encodeURIComponent(String(requestParameters.outlinePk))
          )
          .replace(
            `{${"post_id"}}`,
            encodeURIComponent(String(requestParameters.postId))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrievePost(
    requestParameters: RetrievePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Post> {
    const response = await this.retrievePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async retrieveSingleOutlineRaw(
    requestParameters: RetrieveSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SingleOutline>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling retrieveSingleOutline."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/1/outlines/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SingleOutlineFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async retrieveSingleOutline(
    requestParameters: RetrieveSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SingleOutline> {
    const response = await this.retrieveSingleOutlineRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async updatePostRaw(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Post>> {
    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        "postId",
        "Required parameter requestParameters.postId was null or undefined when calling updatePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/1/posts/{post_id}/`.replace(
          `{${"post_id"}}`,
          encodeURIComponent(String(requestParameters.postId))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: PostToJSON(requestParameters.post),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async updatePost(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Post> {
    const response = await this.updatePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async updateSingleOutlineRaw(
    requestParameters: UpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SingleOutline>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateSingleOutline."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/1/outlines/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: SingleOutlineToJSON(requestParameters.singleOutline),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SingleOutlineFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async updateSingleOutline(
    requestParameters: UpdateSingleOutlineRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SingleOutline> {
    const response = await this.updateSingleOutlineRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
